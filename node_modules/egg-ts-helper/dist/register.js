"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const cluster = require("cluster");
const d = require("debug");
const fs = require("fs");
const path = require("path");
const processExists = require("process-exists");
const _1 = require("./");
const utils_1 = require("./utils");
const debug = d('egg-ts-helper#register');
const cacheFileDir = path.resolve(__dirname, '../.cache');
// make sure ets only run once
if (cluster.isMaster) {
    let existPid;
    if (fs.existsSync(cacheFileDir)) {
        existPid = +fs.readFileSync(cacheFileDir).toString();
    }
    if (!existPid) {
        register();
    }
    else {
        processExists(existPid).then(exists => {
            if (!exists) {
                register();
            }
            else {
                debug('process %s was exits, ignore register', existPid);
            }
        });
    }
}
// start to register
function register() {
    // fork a process to watch files change
    const ps = child_process_1.fork(path.resolve(__dirname, './bin'), ['-w'], {
        execArgv: [],
    });
    // kill child process while process exit
    function close() {
        if (!ps.killed) {
            if (process.platform === 'win32') {
                child_process_1.exec('taskkill /pid ' + ps.pid + ' /T /F');
            }
            else {
                ps.kill('SIGHUP');
            }
        }
    }
    process.on('exit', close);
    process.on('SIGINT', close);
    process.on('SIGTERM', close);
    process.on('SIGHUP', close);
    // clean local js file at first.
    // because egg-loader cannot load the same property name to egg.
    utils_1.cleanJs(process.cwd());
    // exec building at first
    _1.createTsHelperInstance().build();
    // cache pid
    fs.writeFileSync(cacheFileDir, process.pid);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVnaXN0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBMkM7QUFDM0MsbUNBQW1DO0FBQ25DLDJCQUEyQjtBQUMzQix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLGdEQUFnRDtBQUNoRCx5QkFBNEM7QUFDNUMsbUNBQWtDO0FBQ2xDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO0FBQzFDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBRTFELDhCQUE4QjtBQUM5QixJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7SUFDcEIsSUFBSSxRQUE0QixDQUFDO0lBQ2pDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsRUFBRTtRQUMvQixRQUFRLEdBQUcsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDO0tBQ3REO0lBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRTtRQUNiLFFBQVEsRUFBRSxDQUFDO0tBQ1o7U0FBTTtRQUNMLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDcEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDWCxRQUFRLEVBQUUsQ0FBQzthQUNaO2lCQUFNO2dCQUNMLEtBQUssQ0FBQyx1Q0FBdUMsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUMxRDtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7Q0FDRjtBQUVELG9CQUFvQjtBQUNwQjtJQUNFLHVDQUF1QztJQUN2QyxNQUFNLEVBQUUsR0FBRyxvQkFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDeEQsUUFBUSxFQUFFLEVBQUU7S0FDYixDQUFDLENBQUM7SUFFSCx3Q0FBd0M7SUFDeEM7UUFDRSxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRTtZQUNkLElBQUksT0FBTyxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7Z0JBQ2hDLG9CQUFJLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQzthQUM1QztpQkFBTTtnQkFDTCxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ25CO1NBQ0Y7SUFDSCxDQUFDO0lBRUQsT0FBTyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUIsT0FBTyxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0IsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFNUIsZ0NBQWdDO0lBQ2hDLGdFQUFnRTtJQUNoRSxlQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFFdkIseUJBQXlCO0lBQ3pCLHlCQUFzQixFQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7SUFFakMsWUFBWTtJQUNaLEVBQUUsQ0FBQyxhQUFhLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUM5QyxDQUFDIn0=