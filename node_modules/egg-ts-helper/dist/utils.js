"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const glob = require("globby");
const path = require("path");
const ts = require("typescript");
// load ts/js files
function loadFiles(cwd, pattern) {
    const fileList = glob.sync([pattern || '**/*.(js|ts)', '!**/*.d.ts'], {
        cwd,
    });
    return fileList.filter(f => {
        // filter same name js/ts
        return !(f.endsWith('.js') &&
            fileList.includes(f.substring(0, f.length - 2) + 'ts'));
    });
}
exports.loadFiles = loadFiles;
// clean same name js/ts
function cleanJs(cwd) {
    const fileList = [];
    glob
        .sync(['**/*.ts', '!**/*.d.ts', '!**/node_modules'], { cwd })
        .forEach(f => {
        const jf = removeSameNameJs(path.resolve(cwd, f));
        if (jf) {
            fileList.push(jf);
        }
    });
    if (fileList.length) {
        console.info(`[egg-ts-helper] These file was deleted because the same name ts file was exist!\n`);
        console.info('  ' + fileList.join('\n  ') + '\n');
    }
}
exports.cleanJs = cleanJs;
// get moduleName by file path
function getModuleObjByPath(f) {
    const props = f.split('/').map(prop => 
    // transfer _ to uppercase
    prop.replace(/[._-][a-z]/gi, s => s.substring(1).toUpperCase()));
    // composing moduleName
    const moduleName = props
        .map(prop => prop[0].toUpperCase() + prop.substring(1))
        .join('');
    return {
        props,
        moduleName,
    };
}
exports.getModuleObjByPath = getModuleObjByPath;
// remove same name js
function removeSameNameJs(f) {
    if (!f.endsWith('.ts') || f.endsWith('.d.ts')) {
        return;
    }
    const jf = f.substring(0, f.length - 2) + 'js';
    if (fs.existsSync(jf)) {
        fs.unlinkSync(jf);
        return jf;
    }
}
exports.removeSameNameJs = removeSameNameJs;
// parse ts file to ast
function getSourceFile(f) {
    const code = fs.readFileSync(f, {
        encoding: 'utf-8',
    });
    try {
        return ts.createSourceFile(f, code, ts.ScriptTarget.ES2017, true);
    }
    catch (e) {
        console.error(e);
        return;
    }
}
exports.getSourceFile = getSourceFile;
// check whether node was module.exports
function isModuleExports(node) {
    if (ts.isPropertyAccessExpression(node)) {
        const obj = node.expression;
        const prop = node.name;
        return (ts.isIdentifier(obj) &&
            obj.escapedText === 'module' &&
            ts.isIdentifier(prop) &&
            prop.escapedText === 'exports');
    }
    return false;
}
exports.isModuleExports = isModuleExports;
// check kind in node.modifiers.
function modifierHas(node, kind) {
    return node.modifiers && node.modifiers.find(mod => kind === mod.kind);
}
exports.modifierHas = modifierHas;
// each ast node
function eachSourceFile(node, cb) {
    const result = cb(node);
    if (result === false) {
        return;
    }
    node.forEachChild((sub) => {
        eachSourceFile(sub, cb);
    });
}
exports.eachSourceFile = eachSourceFile;
// require modules
function requireFile(url) {
    if (!fs.existsSync(url)) {
        return undefined;
    }
    let exp = require(url);
    if (exp.__esModule && 'default' in exp) {
        exp = exp.default;
    }
    if (typeof exp === 'function') {
        exp = exp();
    }
    return exp;
}
exports.requireFile = requireFile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvdXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5QkFBeUI7QUFDekIsK0JBQStCO0FBQy9CLDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFFakMsbUJBQW1CO0FBQ25CLG1CQUEwQixHQUFXLEVBQUUsT0FBZ0I7SUFDckQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sSUFBSSxjQUFjLEVBQUUsWUFBWSxDQUFDLEVBQUU7UUFDcEUsR0FBRztLQUNKLENBQUMsQ0FBQztJQUVILE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUN6Qix5QkFBeUI7UUFDekIsT0FBTyxDQUFDLENBQ04sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDakIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUN2RCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBWkQsOEJBWUM7QUFFRCx3QkFBd0I7QUFDeEIsaUJBQXdCLEdBQVc7SUFDakMsTUFBTSxRQUFRLEdBQWEsRUFBRSxDQUFDO0lBQzlCLElBQUk7U0FDRCxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBQztTQUM1RCxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDWCxNQUFNLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELElBQUksRUFBRSxFQUFFO1lBQ04sUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNuQjtJQUNILENB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