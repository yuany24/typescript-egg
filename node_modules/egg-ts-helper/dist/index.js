"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chokidar = require("chokidar");
const d = require("debug");
const events_1 = require("events");
const fs = require("fs");
const mkdirp = require("mkdirp");
const path = require("path");
const utils = require("./utils");
const debug = d('egg-ts-helper#index');
exports.defaultConfig = {
    cwd: process.cwd(),
    framework: 'egg',
    typings: './typings',
    caseStyle: 'lower',
    autoRemoveJs: true,
    throttle: 500,
    watch: false,
    execAtInit: false,
    watchDirs: {},
    configFile: './tshelper.js',
};
// default watch dir
function getDefaultWatchDirs() {
    return {
        extend: {
            path: 'app/extend',
            interface: {
                context: 'Context',
                application: 'Application',
                agent: 'Application',
                request: 'Request',
                response: 'Response',
                helper: 'IHelper',
            },
            generator: 'extend',
            trigger: ['add', 'change', 'unlink'],
            enabled: true,
        },
        controller: {
            path: 'app/controller',
            interface: 'IController',
            generator: 'class',
            trigger: ['add', 'unlink'],
            enabled: true,
        },
        proxy: {
            path: 'app/proxy',
            interface: 'IProxy',
            generator: 'class',
            trigger: ['add', 'unlink'],
            enabled: false,
        },
        config: {
            path: 'config',
            pattern: 'config*.(ts|js)',
            interface: {
                inserts: ['Application', 'Controller', 'Service'],
                property: 'config',
                base: 'EggAppConfig',
            },
            generator: 'config',
            trigger: ['add', 'unlink', 'change'],
            enabled: true,
        },
        plugin: {
            path: 'config',
            pattern: 'plugin*.(ts|js)',
            generator: 'plugin',
            trigger: ['add', 'unlink', 'change'],
            enabled: true,
        },
        service: {
            path: 'app/service',
            interface: 'IService',
            generator: 'class',
            trigger: ['add', 'unlink'],
            enabled: true,
        },
    };
}
exports.getDefaultWatchDirs = getDefaultWatchDirs;
// preload generators
const gd = path.resolve(__dirname, './generators');
const generators = fs
    .readdirSync(gd)
    .filter(f => !f.endsWith('.d.ts'))
    .map(f => require(path.resolve(gd, f.substring(0, f.lastIndexOf('.')))).default);
class TsHelper extends events_1.EventEmitter {
    constructor(options = {}) {
        super();
        this.generators = {};
        this.watchers = [];
        this.tickerMap = {};
        this.watched = false;
        this.cacheDist = {};
        const config = (this.config = this.configure(options));
        debug('framework is %s', config.framework);
        // add build-in generators
        generators.forEach(gen => gen(this));
        // cached watching name list
        this.watchNameList = Object.keys(config.watchDirs).filter(key => {
            const dir = config.watchDirs[key];
            return Object.prototype.hasOwnProperty.call(dir, 'enabled')
                ? dir.enabled
                : true;
        });
        // format watching dirs
        this.watchDirs = this.watchNameList.map(key => {
            const item = config.watchDirs[key];
            const p = item.path.replace(/\/|\\/, path.sep);
            return getAbsoluteUrlByCwd(p, config.cwd);
        });
        // generate d.ts at init
        if (config.execAtInit) {
            debug('exec at init');
            this.build();
        }
        // start watching dirs
        if (config.watch) {
            this.watch();
        }
    }
    // register d.ts generator
    register(name, tsGen) {
        this.generators[name] = tsGen;
    }
    // build all dirs
    build() {
        this.watchDirs.forEach((_, i) => this.generateTs(i));
    }
    // init watcher
    watch() {
        if (this.watched) {
            return;
        }
        // create watcher for each dir
        this.watchDirs.forEach((item, index) => {
            const conf = this.config.watchDirs[this.watchNameList[index]];
            // glob only works with / in windows
            const watchGlob = path
                .join(item, conf.pattern || '**/*.(js|ts)')
                .replace(/\/|\\/g, '/');
            const watcher = chokidar.watch(watchGlob);
            // listen watcher event
            watcher.on('all', (event, p) => this.onChange(p, event, index));
            // auto remove js while ts was deleted
            if (this.config.autoRemoveJs) {
                watcher.on('unlink', utils.removeSameNameJs);
            }
            this.watchers.push(watcher);
        });
        this.watched = true;
    }
    // configure
    // options > configFile > package.json
    configure(options) {
        // base config
        const config = Object.assign({}, exports.defaultConfig, { watchDirs: getDefaultWatchDirs() });
        const cwd = options.cwd || config.cwd;
        const configFile = options.configFile || config.configFile;
        const pkgInfo = utils.requireFile(path.resolve(cwd, './package.json')) || {};
        // read from package.json
        if (pkgInfo.egg) {
            config.framework = pkgInfo.egg.framework || exports.defaultConfig.framework;
            mergeConfig(config, pkgInfo.egg.tsHelper);
        }
        // read from local file
        mergeConfig(config, utils.requireFile(getAbsoluteUrlByCwd(configFile, cwd)));
        debug('%o', config);
        // merge local config and options to config
        mergeConfig(config, options);
        debug('%o', options);
        // resolve config.typings to absolute url
        config.typings = getAbsoluteUrlByCwd(config.typings, cwd);
        return config;
    }
    generateTs(index, event, file) {
        const config = this.config;
        const dir = this.watchDirs[index];
        const watchName = this.watchNameList[index];
        const generatorConfig = config.watchDirs[watchName];
        if (!generatorConfig.trigger ||
            (event && !generatorConfig.trigger.includes(event))) {
            // check whether need to regenerate ts
            return;
        }
        const generator = typeof generatorConfig.generator === 'string'
            ? this.generators[generatorConfig.generator]
            : generatorConfig.generator;
        if (typeof generator !== 'function') {
            throw new Error(`ts generator: ${generatorConfig.generator} not exist!!`);
        }
        const dtsDir = path.resolve(config.typings, path.relative(config.cwd, dir));
        const result = generator(Object.assign({}, generatorConfig, { dir, file, dtsDir }), config);
        debug('generate ts file result : %o', result);
        if (!result) {
            return;
        }
        const resultList = Array.isArray(result) ? result : [result];
        resultList.forEach(item => {
            if (this.cacheDist[item.dist] &&
                this.cacheDist[item.dist].content === item.content) {
                return;
            }
            this.cacheDist[item.dist] = item;
            if (item.content) {
                debug('created d.ts : %s', item.dist);
                mkdirp.sync(path.dirname(item.dist));
                fs.writeFileSync(item.dist, '// This file was auto created by egg-ts-helper\n' +
                    '// Do not modify this file!!!!!!!!!\n\n' +
                    item.content);
                this.emit('update', item.dist, file);
            }
            else if (fs.existsSync(item.dist)) {
                debug('remove d.ts : %s', item.dist);
                fs.unlinkSync(item.dist);
                this.emit('remove', item.dist, file);
            }
        });
    }
    // trigger while file changed
    onChange(p, event, index) {
        debug('%s trigger change', p);
        const k = p.substring(0, p.lastIndexOf('.'));
        if (this.tickerMap[k]) {
            return;
        }
        // throttle 500ms
        this.tickerMap[k] = setTimeout(() => {
            debug('trigger change event in %s', index);
            this.emit('change', p);
            this.generateTs(index, event, p);
            this.tickerMap[k] = null;
        }, this.config.throttle);
    }
}
exports.default = TsHelper;
function createTsHelperInstance(options) {
    return new TsHelper(options);
}
exports.createTsHelperInstance = createTsHelperInstance;
function getAbsoluteUrlByCwd(p, cwd) {
    return path.isAbsolute(p) ? p : path.resolve(cwd, p);
}
// merge ts helper options
function mergeConfig(base, ...args) {
    args.forEach(opt => {
        if (!opt) {
            return;
        }
        Object.keys(opt).forEach(key => {
            if (key === 'watchDirs') {
                const watchDirs = opt.watchDirs || {};
                Object.keys(watchDirs).forEach(k => {
                    const item = watchDirs[k];
                    if (typeof item === 'boolean') {
                        if (base.watchDirs[k]) {
                            base.watchDirs[k].enabled = item;
                        }
                    }
                    else if (item) {
                        if (base.watchDirs[k]) {
                            Object.assign(base.watchDirs[k], item);
                        }
                        else {
                            base.watchDirs[k] = item;
                        }
                    }
                });
            }
            else {
                base[key] = opt[key] === undefined ? base[key] : opt[key];
            }
        });
    });
}
//# sourceMappingURL=data:application/json;base64,