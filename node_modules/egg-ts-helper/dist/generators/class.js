"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const d = require("debug");
const path = require("path");
const utils = require("../utils");
const debug = d('egg-ts-helper#generators_class');
function default_1(tsHelper) {
    tsHelper.register('class', (config, baseConfig) => {
        const fileList = utils.loadFiles(config.dir, config.pattern);
        const dist = path.resolve(config.dtsDir, 'index.d.ts');
        debug('file list : %o', fileList);
        if (!fileList.length) {
            return { dist };
        }
        // using to compose import code
        let importStr = '';
        // using to create interface mapping
        const interfaceMap = {};
        fileList.forEach(f => {
            f = f.substring(0, f.lastIndexOf('.'));
            const obj = utils.getModuleObjByPath(f);
            const tsPath = path
                .relative(config.dtsDir, path.join(config.dir, f))
                .replace(/\/|\\/g, '/');
            debug('import %s from %s', obj.moduleName, tsPath);
            importStr += `import ${obj.moduleName} from '${tsPath}';\n`;
            // create mapping
            let collector = interfaceMap;
            while (obj.props.length) {
                const name = camelProp(obj.props.shift(), baseConfig.caseStyle);
                if (!obj.props.length) {
                    collector[name] = obj.moduleName;
                }
                else {
                    collector = collector[name] = collector[name] || {};
                }
            }
        });
        return {
            dist,
            content: `${importStr}\n` +
                `declare module '${baseConfig.framework}' {\n` +
                `  interface ${config.interface} {\n` +
                composeInterface(interfaceMap, '    ') +
                '  }\n' +
                '}\n',
        };
    });
}
exports.default = default_1;
function composeInterface(obj, indent = '') {
    let str = '';
    Object.keys(obj).forEach(key => {
        const val = obj[key];
        if (typeof val === 'string') {
            str += `${indent + key}: ${val};\n`;
        }
        else {
            const newVal = composeInterface(val, indent + '  ');
            if (newVal) {
                str += `${indent + key}: {\n${newVal + indent}};\n`;
            }
        }
    });
    return str;
}
// like egg-core/file-loader
function camelProp(property, caseStyle) {
    let first = property[0];
    // istanbul ignore next
    switch (caseStyle) {
        case 'lower':
            first = first.toLowerCase();
            break;
        case 'upper':
            first = first.toUpperCase();
            break;
        case 'camel':
        default:
    }
    return first + property.substring(1);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2VuZXJhdG9ycy9jbGFzcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDJCQUEyQjtBQUMzQiw2QkFBNkI7QUFFN0Isa0NBQWtDO0FBQ2xDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0FBRWxELG1CQUF3QixRQUFrQjtJQUN4QyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRTtRQUNoRCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQzdELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUV2RCxLQUFLLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDcEIsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ2pCO1FBRUQsK0JBQStCO1FBQy9CLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNuQixvQ0FBb0M7UUFDcEMsTUFBTSxZQUFZLEdBQWdCLEVBQUUsQ0FBQztRQUVyQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ25CLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDdkMsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLE1BQU0sTUFBTSxHQUFHLElBQUk7aUJBQ2hCLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFF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