"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const d = require("debug");
const path = require("path");
const ts = require("typescript");
const utils = require("../utils");
const debug = d('egg-ts-helper#generators_config');
exports.EXPORT_DEFAULT_FUNCTION = 1;
exports.EXPORT_DEFAULT = 2;
exports.EXPORT = 3;
const cache = {};
function default_1(tsHelper) {
    tsHelper.register('config', (config, baseConfig) => {
        const fileList = utils.loadFiles(config.dir, config.pattern);
        const dist = path.resolve(config.dtsDir, 'index.d.ts');
        if (!fileList.length) {
            return { dist };
        }
        const importList = [];
        const declarationList = [];
        const moduleList = [];
        fileList.forEach(f => {
            const abUrl = path.resolve(config.dir, f);
            // read from cache
            if (!cache[abUrl] || config.file === abUrl) {
                f = f.substring(0, f.lastIndexOf('.'));
                const type = checkConfigReturnType(abUrl);
                const moduleName = utils.getModuleObjByPath(f).moduleName;
                const tsPath = path
                    .relative(config.dtsDir, path.join(config.dir, f))
                    .replace(/\/|\\/g, '/');
                debug('import %s from %s', moduleName, tsPath);
                const imn = `Export${moduleName}`;
                const prefix = type === exports.EXPORT ? '* as ' : '';
                const ims = `import ${prefix}${imn} from '${tsPath}';`;
                let tds = `type ${moduleName} = `;
                if (type === exports.EXPORT_DEFAULT_FUNCTION) {
                    tds += `ReturnType<typeof ${imn}>;`;
                }
                else if (type === exports.EXPORT_DEFAULT || type === exports.EXPORT) {
                    tds += `typeof ${imn};`;
                }
                else {
                    return;
                }
                // cache the file
                cache[abUrl] = {
                    import: ims,
                    declaration: tds,
                    moduleName,
                };
            }
            const cacheItem = cache[abUrl];
            importList.push(cacheItem.import);
            declarationList.push(cacheItem.declaration);
            moduleList.push(cacheItem.moduleName);
        });
        if (!importList.length) {
            return { dist };
        }
        const { base, inserts, property } = config.interface;
        const newType = `New${base}`;
        return {
            dist,
            content: `import { ${base} } from '${baseConfig.framework}';\n` +
                `${importList.join('\n')}\n` +
                `${declarationList.join('\n')}\n` +
                `type ${newType} = ${base} & ${moduleList.join(' & ')};\n\n` +
                `declare module '${baseConfig.framework}' {\n` +
                inserts
                    .map(prop => {
                    return (`  interface ${prop} {\n` +
                        `    ${property}: ${newType};\n` +
                        `  }\n`);
                })
                    .join('\n') +
                `}`,
        };
    });
}
exports.default = default_1;
// check config return type.
function checkConfigReturnType(f) {
    const sourceFile = utils.getSourceFile(f);
    if (!sourceFile) {
        return;
    }
    let hasExport = false;
    let exportElement;
    utils.eachSourceFile(sourceFile, node => {
        if (node.parent !== sourceFile) {
            return;
        }
        if (ts.isExportAssignment(node)) {
            // has export default ...
            exportElement = node.expression;
            return false;
        }
        else if (utils.modifierHas(node, ts.SyntaxKind.ExportKeyword)) {
            if (utils.modifierHas(node, ts.SyntaxKind.DefaultKeyword)) {
                exportElement = node;
                return;
            }
            // has export
            hasExport = true;
        }
    });
    if (exportElement) {
        return ts.isFunctionLike(exportElement)
            ? exports.EXPORT_DEFAULT_FUNCTION
            : exports.EXPORT_DEFAULT;
    }
    else if (hasExport) {
        return exports.EXPORT;
    }
}
exports.checkConfigReturnType = checkConfigReturnType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2dlbmVyYXRvcnMvY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkJBQTJCO0FBQzNCLDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFFakMsa0NBQWtDO0FBQ2xDLE1BQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0FBRXRDLFFBQUEsdUJBQXVCLEdBQUcsQ0FBQyxDQUFDO0FBQzVCLFFBQUEsY0FBYyxHQUFHLENBQUMsQ0FBQztBQUNuQixRQUFBLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFReEIsTUFBTSxLQUFLLEdBQWtDLEVBQUUsQ0FBQztBQUVoRCxtQkFBd0IsUUFBa0I7SUFDeEMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLEVBQUU7UUFDakQsTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3RCxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDcEIsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO1NBQ2pCO1FBRUQsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sZUFBZSxHQUFhLEVBQUUsQ0FBQztRQUNyQyxNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUNuQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFMUMsa0JBQWtCO1lBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxLQUFLLEVBQUU7Z0JBQzFDLENBQUMsR0FBRyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLE1BQU0sSUFBSSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUMxQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDO2dCQUMxRCxNQUFNLE1BQU0sR0FBRyxJQUFJO3FCQUNoQixRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7cUJBQ2pELE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzFCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBRS9DLE1BQU0sR0FBRyxHQUFHLFNBQVMsVUFBVSxFQUFFLENBQUM7Z0JBQ2xDLE1BQU0sTUFBTSxHQUFHLElBQUksS0FBSyxjQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM5QyxNQUFNLEdBQUcsR0FBRyxVQUFVLE1BQU0sR0FBRyxHQUFHLFVBQVUsTUFBTSxJQUFJLENBQUM7Z0JBQ3ZELElBQUksR0FBRyxHQUFHLFFBQVEsVUFBVSxLQUFLLENBQUM7Z0JBRWxDLElBQUksSUFBSSxLQUFLLCtCQUF1QixFQUFFO29CQUNwQyxHQUFHLElBQUkscUJBQXFCLEdBQUcsSUFBSSxDQUFDO2lCQUNyQztxQkFBTSxJQUFJLElBQUksS0FBSyxzQkFBYyxJQUFJLElBQUksS0FBSyxjQUFNLEVBQUU7b0JBQ3JELEdBQUcsSUFBSSxVQUFVLEdBQUcsR0FBRyxDQUFDO2lCQUN6QjtxQkFBTTtvQkFDTCxPQUFPO2lCQUNSO2dCQUVELGlCQUFpQjtnQkFDakIsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHO29CQUNiLE1BQU0sRUFBRSxHQUFHO29CQUNYLFdBQVcsRUFBRSxHQUFHO29CQUNoQixVQUFVO2lCQUNYLENBQUM7YUFDSDtZQUVELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMvQixVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM1QyxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ3RCLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUNqQjtRQUVELE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUM7UUFDckQsTUFBTSxPQUFPLEdBQUcsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUM3QixPQUFPO1lBQ0wsSUFBSTtZQUNKLE9BQU8sRUFDTCxZQUFZLElBQUksWUFBWSxVQUFVLENBQUMsU0FBUyxNQUFNO2dCQUN0RCxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUk7Z0JBQzVCLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTtnQkFDakMsUUFBUSxPQUFPLE1BQU0sSUFBSSxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Z0JBQzVELG1CQUFtQixVQUFVLENBQUMsU0FBUyxPQUFPO2dCQUM5QyxPQUFPO3FCQUNKLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDVixPQUFPLENBQ0wsZUFBZSxJQUFJLE1BQU07d0JBQ3pCLE9BQU8sUUFBUSxLQUFLLE9BQU8sS0FBSzt3QkFDaEMsT0FBTyxDQUNSLENBQUM7Z0JBQ0osQ0FBQyxDQUFDO3FCQUNELElBQUksQ0FBQyxJQUFJLENBQUM7Z0JBQ2IsR0FBRztTQUNOLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUE3RUQsNEJBNkVDO0FBRUQsNEJBQTRCO0FBQzVCLCtCQUFzQyxDQUFTO0lBQzdDLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBSSxDQUFDLFVBQVUsRUFBRTtRQUNmLE9BQU87S0FDUjtJQUVELElBQUksU0FBUyxHQUFHLEtBQUssQ0FBQztJQUN0QixJQUFJLGFBQWtDLENBQUM7SUFDdkMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEVBQUU7UUFDdEMsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFVBQVUsRUFBRTtZQUM5QixPQUFPO1NBQ1I7UUFFRCxJQUFJLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUMvQix5QkFBeUI7WUFDekIsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDthQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRTtZQUMvRCxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLEVBQUU7Z0JBQ3pELGFBQWEsR0FBRyxJQUFJLENBQUM7Z0JBQ3JCLE9BQU87YUFDUjtZQUVELGFBQWE7WUFDYixTQUFTLEdBQUcsSUFBSSxDQUFDO1NBQ2xCO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLGFBQWEsRUFBRTtRQUNqQixPQUFPLEVBQUUsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1lBQ3JDLENBQUMsQ0FBQywrQkFBdUI7WUFDekIsQ0FBQyxDQUFDLHNCQUFjLENBQUM7S0FDcEI7U0FBTSxJQUFJLFNBQVMsRUFBRTtRQUNwQixPQUFPLGNBQU0sQ0FBQztLQUNmO0FBQ0gsQ0FBQztBQW5DRCxzREFtQ0MifQ==